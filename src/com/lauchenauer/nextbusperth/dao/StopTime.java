package com.lauchenauer.nextbusperth.dao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table STOP_TIME.
 */
public class StopTime {

    private Long id;
    private Long route_id;
    private java.util.Date departure_time;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient StopTimeDao myDao;

    private Route route;
    private Long route__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public StopTime() {
    }

    public StopTime(Long id) {
        this.id = id;
    }

    public StopTime(Long id, Long route_id, java.util.Date departure_time) {
        this.id = id;
        this.route_id = route_id;
        this.departure_time = departure_time;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStopTimeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getRoute_id() {
        return route_id;
    }

    public void setRoute_id(Long route_id) {
        this.route_id = route_id;
    }

    public java.util.Date getDeparture_time() {
        return departure_time;
    }

    public void setDeparture_time(java.util.Date departure_time) {
        this.departure_time = departure_time;
    }

    /** To-one relationship, resolved on first access. */
    public Route getRoute() {
        if (route__resolvedKey == null || !route__resolvedKey.equals(route_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RouteDao targetDao = daoSession.getRouteDao();
            route = targetDao.load(route_id);
            route__resolvedKey = route_id;
        }
        return route;
    }

    public void setRoute(Route route) {
        this.route = route;
        route_id = route == null ? null : route.getId();
        route__resolvedKey = route_id;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
