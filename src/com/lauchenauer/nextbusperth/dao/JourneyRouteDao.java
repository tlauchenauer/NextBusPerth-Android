package com.lauchenauer.nextbusperth.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.lauchenauer.nextbusperth.dao.JourneyRoute;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table JOURNEY_ROUTE.
*/
public class JourneyRouteDao extends AbstractDao<JourneyRoute, Long> {

    public static final String TABLENAME = "JOURNEY_ROUTE";

    /**
     * Properties of entity JourneyRoute.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Journey_id = new Property(1, Long.class, "journey_id", false, "JOURNEY_ID");
        public final static Property Route_id = new Property(2, Long.class, "route_id", false, "ROUTE_ID");
        public final static Property Selected = new Property(3, Boolean.class, "selected", false, "SELECTED");
    };

    private DaoSession daoSession;

    private Query<JourneyRoute> journey_JourneyRouteListQuery;

    public JourneyRouteDao(DaoConfig config) {
        super(config);
    }
    
    public JourneyRouteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'JOURNEY_ROUTE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'JOURNEY_ID' INTEGER," + // 1: journey_id
                "'ROUTE_ID' INTEGER," + // 2: route_id
                "'SELECTED' INTEGER);"); // 3: selected
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_JOURNEY_ROUTE_JOURNEY_ID_ROUTE_ID ON JOURNEY_ROUTE" +
                " (JOURNEY_ID,ROUTE_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JOURNEY_ROUTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, JourneyRoute entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long journey_id = entity.getJourney_id();
        if (journey_id != null) {
            stmt.bindLong(2, journey_id);
        }
 
        Long route_id = entity.getRoute_id();
        if (route_id != null) {
            stmt.bindLong(3, route_id);
        }
 
        Boolean selected = entity.getSelected();
        if (selected != null) {
            stmt.bindLong(4, selected ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(JourneyRoute entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public JourneyRoute readEntity(Cursor cursor, int offset) {
        JourneyRoute entity = new JourneyRoute( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // journey_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // route_id
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // selected
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, JourneyRoute entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJourney_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRoute_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSelected(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(JourneyRoute entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(JourneyRoute entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "journeyRouteList" to-many relationship of Journey. */
    public synchronized List<JourneyRoute> _queryJourney_JourneyRouteList(Long journey_id) {
        if (journey_JourneyRouteListQuery == null) {
            QueryBuilder<JourneyRoute> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Journey_id.eq(journey_id));
            journey_JourneyRouteListQuery = queryBuilder.build();
        } else {
            journey_JourneyRouteListQuery.setParameter(0, journey_id);
        }
        return journey_JourneyRouteListQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getJourneyDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getRouteDao().getAllColumns());
            builder.append(" FROM JOURNEY_ROUTE T");
            builder.append(" LEFT JOIN JOURNEY T0 ON T.'JOURNEY_ID'=T0.'_id'");
            builder.append(" LEFT JOIN ROUTE T1 ON T.'ROUTE_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected JourneyRoute loadCurrentDeep(Cursor cursor, boolean lock) {
        JourneyRoute entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Journey journey = loadCurrentOther(daoSession.getJourneyDao(), cursor, offset);
        entity.setJourney(journey);
        offset += daoSession.getJourneyDao().getAllColumns().length;

        Route route = loadCurrentOther(daoSession.getRouteDao(), cursor, offset);
        entity.setRoute(route);

        return entity;    
    }

    public JourneyRoute loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<JourneyRoute> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<JourneyRoute> list = new ArrayList<JourneyRoute>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<JourneyRoute> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<JourneyRoute> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
